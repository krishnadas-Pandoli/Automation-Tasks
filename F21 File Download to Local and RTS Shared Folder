import ftplib
import os
import re
from datetime import datetime



def _is_ftp_dir(ftp_handle, name, guess_by_extension=True):
    """ simply determines if an item listed on the ftp server is a valid directory or not """

    # if the name has a "." in the fourth to last position, its probably a file extension
    # this is MUCH faster than trying to set every file to a working directory, and will work 99% of time.
    if guess_by_extension is True:
        if len(name) >= 4:
            if name[-4] == '.':
                return False

    original_cwd = ftp_handle.pwd()  # remember the current working directory
    try:
        ftp_handle.cwd(name)  # try to set directory to new name
        ftp_handle.cwd(original_cwd)  # set it back to what it was
        return True

    except ftplib.error_perm as e:
        print(e)
        return False

    except Exception as e:
        print(e)
        return False


def _make_parent_dir(fpath):
    """ ensures the parent directory of a filepath exists """
    dirname = os.path.dirname(fpath)
    while not os.path.exists(dirname):
        try:
            os.makedirs(dirname)
            print("created {0}".format(dirname))
        except OSError:
            _make_parent_dir(dirname)


def _download_ftp_file(ftp_handle, name, dest, overwrite):
    """ downloads a single file from an ftp server """
    _make_parent_dir(dest.lstrip("/"))
    if not os.path.exists(dest) or overwrite is True:
        try:
            with open(dest, 'wb') as f:
                ftp_handle.retrbinary("RETR {0}".format(name), f.write)
            print("downloaded: {0}".format(dest))
            rtsloc=None
            fname=name.split("/")[4]

            if fname.startswith(("IX", "PY", "TX")):
                if fname.split(".")[1] == "DAT":
                    storecode=fname[3:6]


                    uaePath = "X:/UAE/UAE_EDI"
                    uaelist = ['801', '803', '825', '833', '804', '846', '805']

                    bahpath = "X:/BAHRAIN/BAH_EDI"
                    bahlist = ['809', '819']

                    indopath = "X:/INDONESIA/IND_EDI"
                    indolist = ['815', '845', '847']

                    jordpath = "X:/JORDAN/JDN_EDI"
                    jordlist = ['848']

                    kuwpath = "X:/KUWAIT/KUW_EDI"
                    kuwlist = ['812']

                    lebpath = "X:/LEBANON/LBN_EDI"
                    leblist = ['841']

                    malpath = "X:/MALAYSIA/MAL_EDI"
                    mallist = ['811', '817', '818', '807']

                    muspath = "X:/MUSCAT/MCT_EDI"
                    muslist = ['814']

                    ksapath = "X:/SAUDI/SAU_EDI"
                    ksalist = ['810', '823', '836', '840']

                    rsapath = "X:/SOUTH_AFRICA/SFA_EDI"
                    rsalist = ['961', '962', '963', ]

                    if storecode in uaelist:
                        rtsloc=uaePath
                    elif storecode in bahlist:
                        rtsloc=bahpath
                    elif storecode in indolist:
                        rtsloc=indopath
                    elif storecode in jordlist:
                        rtsloc=jordpath
                    elif storecode in kuwlist:
                        rtsloc=kuwpath
                    elif storecode in leblist:
                        rtsloc=lebpath
                    elif storecode in mallist:
                        rtsloc=malpath
                    elif storecode in muslist:
                        rtsloc=muspath
                    elif storecode in ksalist:
                        rtsloc=ksapath
                    elif storecode in rsalist:
                        rtsloc=rsapath



                    local_filename = os.path.join(rtsloc, fname)
                    print(local_filename)
                    file = open(local_filename, 'wb')
                    ftp.retrbinary('RETR ' + name, file.write)
                    print("downloaded to RTS: {0}".format(rtsloc))
                    file.close()
            ftp_handle.delete(name)

        except Exception as e:
            print(e)
    else:
        print("already exists: {0}".format(dest))


def _file_name_match_patern(pattern, name):
    """ returns True if filename matches the pattern"""
    if pattern is None:
        return True
    else:
        return bool(re.match(pattern, name))


def _mirror_ftp_dir(ftp_handle, name, overwrite, guess_by_extension, pattern):
    """ replicates a directory on an ftp server recursively """
    for item in ftp_handle.nlst(name):
        if _is_ftp_dir(ftp_handle, item, guess_by_extension):
            _mirror_ftp_dir(ftp_handle, item, overwrite, guess_by_extension, pattern)
        else:
            if _file_name_match_patern(pattern, name):
                _download_ftp_file(ftp_handle, item, item, overwrite)
            else:
                # quietly skip the file
                pass


def download_ftp_tree(ftp_handle, path, destination, pattern=None, overwrite=False, guess_by_extension=True):
    """
    Downloads an entire directory tree from an ftp server to the local destination
    :param ftp_handle: an authenticated ftplib.FTP instance
    :param path: the folder on the ftp server to download
    :param destination: the local directory to store the copied folder
    :param pattern: Python regex pattern, only files that match this pattern will be downloaded.
    :param overwrite: set to True to force re-download of all files, even if they appear to exist already
    :param guess_by_extension: It takes a while to explicitly check if every item is a directory or a file.
        if this flag is set to True, it will assume any file ending with a three character extension ".???" is
        a file and not a directory. Set to False if some folders may have a "." in their names -4th position.
    """
    path = path.lstrip("/")
    original_directory = os.getcwd()  # remember working directory before function is executed
    os.chdir(destination)  # change working directory to ftp mirror directory

    _mirror_ftp_dir(
        ftp_handle,
        path,
        pattern=pattern,
        overwrite=overwrite,
        guess_by_extension=guess_by_extension)

    os.chdir(original_directory)  # reset working directory to what it was before function exec


if __name__ == "__main__":
    # Example usage mirroring all jpg files in an FTP directory tree.
    mysite = "172.170.100.150"
    username = "xxxxxxx"
    password = "xxxxxx"
    remote_dir = "For/"
    local_dir = "C:/Python_File_Transfer/FSales/"
    pattern = None
    today = datetime.now()
    if os.path.exists(local_dir + today.strftime('%Y%m%d')) == False:
        os.mkdir(local_dir + today.strftime('%Y%m%d'))
    local_dir = local_dir + today.strftime('%Y%m%d') + '/'
    ftp = ftplib.FTP(mysite, username, password)
    download_ftp_tree(ftp, remote_dir, local_dir, pattern=pattern, overwrite=False, guess_by_extension=True)
